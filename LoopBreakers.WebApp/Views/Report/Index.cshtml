@using LoopBreakers.WebApp.Helpers
@model ReportViewDTO

@{
    ViewData["Title"] = "Reports";
    string dateFrom = Model.SearchFilter.DateFrom == null ? "" : ((DateTime)Model.SearchFilter.DateFrom).ToString("yyyy-MM-dd");
    string dateTo = Model.SearchFilter.DateTo == null ? "" : ((DateTime)Model.SearchFilter.DateTo).ToString("yyyy-MM-dd");
    string emailSendingTime = Model.SearchFilter.EmailSend == null ? "" : ((DateTime)Model.SearchFilter.EmailSend).ToString("HH-mm");
    string emailAddress = BackgroundJobsHelper.EmailAddress;
}

<h3>Reports</h3>
<hr />
<div class="row">
    <div class="col-auto">
        <form class="row" method="post">
            <div class="col-auto">
                <label class="col-form-label">Search date from:</label>
            </div>
            <div class="col-auto">
                <input type="date" value="@dateFrom" onchange="" name="dateFrom" class="form-control">
            </div>
            <div class="col-auto">
                <label class="col-form-label">to:</label>
            </div>
            <div class="col-auto">
                <input type="date" value="@dateTo" name="dateTo" class="form-control">
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary"><i class="bi bi-search me-2"></i>Search</button>
            </div>
        </form>
    </div>
    <div class="col-auto">
        <form class="row" method="post">
            <div class="col-auto">
                <button type="submit" class="btn btn-danger"><i class="bi bi-x-circle me-2"></i>Clear</button>
            </div>
        </form>
    </div>
    <div class="row">
        <form class="row" method="post">
            <div class="col-auto">
                <label class="col-form-label">Daily Report Email Hour :</label>
                <input class="col-auto" type="time" value="@emailSendingTime.ToString()" onchange="" name="EmailSend" class="form-control">
            </div>
            <div class="col-auto">
                <label class="col-form-label">Enter your Email address :</label>
                <input class="col-auto" type="text" value="@emailAddress" onchange="" name="EmailAddress" class="form-control">
            </div>
            <div class="row">
                <div class="col-auto">
                    <label for="LoginActivity" class="col-auto"> Logins: </label>
                    <select class="col-auto" name="LoginActivity" id="LoginActivity" onchange=''>
                        <option value="false" selected>Choose</option>
                        <option value="true">Active</option>
                        <option value="false">Disactive</option>
                    </select>
                </div>
                <div class="col-auto">
                    <label for="RegisterActivity" class="col-auto"> Registers: </label>
                    <select class="col-auto" name="RegisterActivity" id="RegisterActivity" onchange=''>
                        <option value="false" selected>Choose</option>
                        <option value="true">Active</option>
                        <option value="false">Disactive</option>
                    </select>
                </div>
                <div class="col-auto">
                    <label for="TransferActivity" class="col-auto"> Transfers: </label>
                    <select class="col-auto" name="TransferActivity" id="TransferActivity" onchange=''>
                        <option value="false" selected>Choose</option>
                        <option value="true">Active</option>
                        <option value="false">Disactive</option>
                    </select>
                </div>                
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary"><i class="bi bi-search me-2"></i>Set</button>
            </div>
            
            
        </form>
    </div>

</div>


<hr />
<br />

<h3>Currency Statistics</h3>

<hr />
<div class="row">
    <div class="col-7">

        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Currency.First().Currency)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Currency.First().Count)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Currency)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Currency)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Count)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-5">
        <div class="card border-0" style="width: 70%;">
            <div class="card-body">
                @{
                    List<string> currencyNames = new List<string>();
                    List<int> currencyCounts = new List<int>();
                    foreach (var x in Model.Currency)
                    {
                        currencyNames.Add(x.Currency.ToString());
                        currencyCounts.Add(x.Count);
                    }
                }
                <canvas id="myChart_2" width="200" height="200"></canvas>
                <script>
                    const ctx_2 = document.getElementById('myChart_2');
                    const myChart_2 = new Chart(ctx_2,
                        {
                            type: 'pie',
                            data: {
                                labels: @Html.Raw(Json.Serialize(currencyNames)),
                                datasets: [
                                    {
                                        label: 'Currency',
                                        data: @Html.Raw(Json.Serialize(currencyCounts)),
                                        backgroundColor: [
                                            'rgba(255, 99, 132, 0.2)',
                                            'rgba(54, 162, 235, 0.2)',
                                            'rgba(255, 206, 86, 0.2)',
                                            'rgba(75, 192, 192, 0.2)',
                                            'rgba(153, 102, 255, 0.2)',
                                            'rgba(255, 159, 64, 0.2)'
                                        ],
                                        borderColor: [
                                            'rgba(255, 99, 132, 1)',
                                            'rgba(54, 162, 235, 1)',
                                            'rgba(255, 206, 86, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(153, 102, 255, 1)',
                                            'rgba(255, 159, 64, 1)'
                                        ],
                                        borderWidth: 1
                                    }
                                ]
                            }
                        });
                </script>

            </div>
        </div>

    </div>
</div>
<br />

@*<h3>Transfer Report</h3>

<hr />

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Transfer.First().Created)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Transfer.First().Currency)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Transfer.First().Amount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Transfer.First().FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Transfer.First().LastName)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Transfer)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Currency)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
            </tr>
        }
    </tbody>
</table>
<br />*@
<h3>Activity Report</h3>
<hr />
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Activity.First().Created)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Activity.First().FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Activity.First().LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Activity.First().Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Activity.First().Description)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Activity)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    if (dateFrom != "" && dateTo != "")
    {
        <h3>Register counter</h3>
    }
    else
    {
        <h3>Choose period in order to see details about users activities</h3>
    }
}

@{
    if (Model.RegisterCounter != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayFor(modelItem => Model.RegisterCounter.Name)
                    </th>
                </tr>
            </thead>
            <tbody>

                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => Model.RegisterCounter.Count)
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
    }
}


@{
    if (dateFrom != "" && dateTo != "")
    {
        <h3>Login counter</h3>
    }

}
@{
    if (Model.LoginCounter != null)
    {

        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayFor(modelItem => Model.LoginCounter.Name)
                    </th>
                </tr>
            </thead>
            <tbody>

                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => Model.LoginCounter.Count)
                    </td>
                </tr>
            </tbody>
        </table>
        <br />


        <hr />
    }
}
@{
    if (dateFrom != "" && dateTo != "")
    {
        <h3>Transfer counter</h3>
    }

}
@{
    if (Model.TransferCounter != null)
    {

        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayFor(modelItem => Model.TransferCounter.Name)
                    </th>
                </tr>
            </thead>
            <tbody>

                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => Model.TransferCounter.Count)
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
        <hr />
    }
}

@{
    if (dateFrom != "" && dateTo != "")
    {
        <h3>Most common transfer hours</h3>
    }
}

@{
    if (Model.MostCommonTransferHours != null)
    {
        int[] labels = new int[Model.MostCommonTransferHours.Count];
        int[] values = new int[Model.MostCommonTransferHours.Count];
        for (int i = 0; i < Model.MostCommonTransferHours.Count; i++)
        {
            labels[i] = Model.MostCommonTransferHours[i].Hour;
            values[i] = Model.MostCommonTransferHours[i].Count;
        }
        <div class="row d-flex">
            <div class="col-12">

                <canvas id="myChart" width="100" height="50"></canvas>
                <script>
                        var labels =@Json.Serialize(labels);
                        var values = @Json.Serialize(values);

                    const ctx = document.getElementById('myChart').getContext('2d');
                    const myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                 label: "Most common transfer hours",
                                data: values,
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(255, 206, 86, 0.2)',
                                    'rgba(75, 192, 192, 0.2)',
                                    'rgba(153, 102, 255, 0.2)',
                                    'rgba(255, 159, 64, 0.2)'
                                ],
                                borderColor: [
                                    'rgba(255, 99, 132, 1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)',
                                    'rgba(75, 192, 192, 1)',
                                    'rgba(153, 102, 255, 1)',
                                    'rgba(255, 159, 64, 1)'
                                ],
                                borderWidth: 1
                            },
                           ]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                </script>
            </div>
        </div>
    }
}
